# Pre-commit hooks for code quality enforcement
# Install: pip install pre-commit && pre-commit install
# Run manually: pre-commit run --all-files

# Global configuration
default_stages: [pre-commit]
fail_fast: false
default_install_hook_types: [pre-commit, pre-push]

repos:
  # Code formatting
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: debug-statements
      - id: mixed-line-ending
        args: ['--fix=lf']

  # Python code formatting (auto-fix)
  - repo: https://github.com/psf/black
    rev: 23.9.1
    hooks:
      - id: black
        language_version: python3.11
        args: [--line-length=88]

  # Import sorting (auto-fix)
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]

  # Python linting (only in pre-push)
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        stages: [pre-push]
        args: [--max-line-length=88, --extend-ignore=E203,W503,E501,E402,F841,F541]
        additional_dependencies: [
          flake8-bugbear,
          flake8-comprehensions,
          flake8-simplify,
        ]
        files: ^(models|utils|scripts)/.*\.py$
        exclude: ^(archive|experiments)/

  # Type checking (only in pre-push)
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.5.1
    hooks:
      - id: mypy
        stages: [pre-push]
        additional_dependencies: [
          types-requests,
          types-PyYAML,
          types-setuptools,
          types-toml,
        ]
        files: ^(models|utils|scripts)/.*\.py$
        exclude: ^experiments/
        args: [--ignore-missing-imports, --no-strict-optional]

  # Security linting (only in pre-push)
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        stages: [pre-push]
        args: [-ll]
        files: ^(models|utils|scripts)/.*\.py$
        exclude: ^(tests|archive|experiments)/

  # Remove unused imports (auto-fix)
  - repo: https://github.com/pycqa/autoflake
    rev: v2.2.1
    hooks:
      - id: autoflake
        args: [
          --in-place,
          --remove-all-unused-imports,
          --remove-unused-variables,
          --remove-duplicate-keys,
        ]

  # Notebook output clearing
  - repo: https://github.com/kynan/nbstripout
    rev: 0.6.1
    hooks:
      - id: nbstripout

  # Local hooks for project-specific checks
  - repo: local
    hooks:
      # Check for TODO/FIXME comments (warning only)
      - id: check-todos
        name: check-todos
        entry: bash
        args: [-c, 'grep -r "TODO\|FIXME\|XXX" models/ utils/ scripts/ --include="*.py" 2>/dev/null || true']
        language: system
        pass_filenames: false
        always_run: false

      # Check for hardcoded paths (warning only)
      - id: check-hardcoded-paths
        name: check-hardcoded-paths
        entry: bash
        args: [-c, 'grep -r "/Users/\|/home/\|C:\\\\" models/ utils/ scripts/ --include="*.py" 2>/dev/null | grep -v "example\|template" || true']
        language: system
        pass_filenames: false
        always_run: false

      # Run basic tests on changed files (pre-push only)
      - id: pytest-check
        name: pytest-check
        entry: bash
        args: [-c, 'if [ -d tests ]; then pytest tests/ -x -q || echo "Some tests failed (non-blocking)"; fi']
        language: system
        pass_filenames: false
        stages: [pre-push]
        always_run: false
