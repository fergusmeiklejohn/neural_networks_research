# Pre-commit hooks for code quality enforcement
# Install: pip install pre-commit && pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # Code formatting
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: debug-statements
      - id: mixed-line-ending
        args: ['--fix=lf']

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.9.1
    hooks:
      - id: black
        language_version: python3.11
        args: [--line-length=88]

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]

  # Python linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        additional_dependencies: [
          flake8-docstrings,
          flake8-import-order,
          flake8-bugbear,
          flake8-comprehensions,
          flake8-simplify,
        ]

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.5.1
    hooks:
      - id: mypy
        additional_dependencies: [
          types-requests,
          types-PyYAML,
          types-setuptools,
          types-toml,
        ]
        # Only run on Python files, not notebooks
        files: ^(models|utils|scripts)/.*\.py$
        # Skip experimental code for now
        exclude: ^experiments/

  # Security linting
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, models, utils, scripts]
        exclude: tests/

  # Documentation
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        files: ^(models|utils)/.*\.py$
        args: [--convention=google]

  # Upgrade syntax
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.10.1
    hooks:
      - id: pyupgrade
        args: [--py310-plus]

  # Remove unused imports
  - repo: https://github.com/pycqa/autoflake
    rev: v2.2.1
    hooks:
      - id: autoflake
        args: [
          --in-place,
          --remove-all-unused-imports,
          --remove-unused-variables,
          --remove-duplicate-keys,
        ]

  # Jupyter notebook cleaning
  - repo: https://github.com/nbQA-dev/nbQA
    rev: 1.7.0
    hooks:
      - id: nbqa-black
        additional_dependencies: [black==23.9.1]
      - id: nbqa-isort
        additional_dependencies: [isort==5.12.0]
      - id: nbqa-flake8
        additional_dependencies: [flake8==6.1.0]

  # Notebook output clearing
  - repo: https://github.com/kynan/nbstripout
    rev: 0.6.1
    hooks:
      - id: nbstripout

  # Local hooks for project-specific checks
  - repo: local
    hooks:
      # Run basic tests on changed files
      - id: pytest-check
        name: pytest-check
        entry: pytest
        language: system
        pass_filenames: false
        always_run: false
        files: ^tests/.*\.py$
        stages: [pre-commit]

      # Check for TODO/FIXME comments in production code
      - id: check-todos
        name: check-todos
        entry: bash -c 'if grep -r "TODO\|FIXME\|XXX" models/ utils/ scripts/ --include="*.py"; then echo "Found TODO/FIXME comments in production code"; exit 1; fi'
        language: system
        pass_filenames: false
        always_run: true

      # Validate experiment documentation
      - id: check-experiment-docs
        name: check-experiment-docs
        entry: python scripts/validate_experiment_docs.py
        language: system
        pass_filenames: false
        files: ^experiments/.*/(EXPERIMENT_PLAN|CURRENT_STATUS)\.md$
        always_run: false

      # Check for hardcoded paths
      - id: check-hardcoded-paths
        name: check-hardcoded-paths
        entry: bash -c 'if grep -r "/Users/\|/home/\|C:\\\\" models/ utils/ scripts/ --include="*.py"; then echo "Found hardcoded paths"; exit 1; fi'
        language: system
        pass_filenames: false
        always_run: true

      # Validate keras backend configuration
      - id: check-keras-backend
        name: check-keras-backend
        entry: python -c "import sys; sys.path.append('utils'); from config import validate_keras_backend; validate_keras_backend()"
        language: system
        pass_filenames: false
        always_run: false
        files: ^(models|utils)/.*\.py$

# Global configuration
default_stages: [pre-commit]
fail_fast: false
# Temporarily disable pre-push hooks until environment is configured
default_install_hook_types: [pre-commit]

# Configuration for specific stages
repos:
  - repo: local
    hooks:
      # Run full test suite on pre-push
      - id: pytest-full
        name: pytest-full
        entry: pytest tests/ --cov=models --cov=utils --cov-fail-under=70
        language: system
        pass_filenames: false
        stages: [pre-push]

      # Run type checking on all files for pre-push
      - id: mypy-full
        name: mypy-full
        entry: mypy models/ utils/ scripts/
        language: system
        pass_filenames: false
        stages: [pre-push]